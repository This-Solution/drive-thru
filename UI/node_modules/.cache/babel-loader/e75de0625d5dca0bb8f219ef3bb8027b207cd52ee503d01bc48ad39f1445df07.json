{"ast":null,"code":"var _jsxFileName = \"/home/harshad/OrderKey-Hub/drive-thru/UI/src/contexts/StompContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// context/StompContext.tsx\nimport { Client } from '@stomp/stompjs';\nimport { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StompContext = /*#__PURE__*/createContext(undefined);\nexport const StompProvider = ({\n  children\n}) => {\n  _s();\n  const [errorMessage, setErrorMessage] = useState('');\n  const [orderWindow, setOrderWindow] = useState({});\n  const [cameraName, setCameraName] = useState('');\n  const [deliveryWindow, setDeliveryWindow] = useState({});\n  const [client, setClient] = useState(null);\n  const clientRef = useRef(null);\n  useEffect(() => {\n    if (client) {\n      client.subscribe('/topic/send', handleMessage);\n    }\n  }, [client]);\n  const handleMessage = message => {\n    if (!message.body) return;\n    try {\n      var _response$cameraType, _response$cameraName, _response$carPlateNum, _response$carPlateNum2;\n      const response = JSON.parse(message.body);\n      const cameraType = (_response$cameraType = response.cameraType) !== null && _response$cameraType !== void 0 ? _response$cameraType : '';\n      const cameraName = (_response$cameraName = response.cameraName) !== null && _response$cameraName !== void 0 ? _response$cameraName : '';\n      const carPlateNumber = (_response$carPlateNum = (_response$carPlateNum2 = response.carPlateNumber) === null || _response$carPlateNum2 === void 0 ? void 0 : _response$carPlateNum2.toString()) !== null && _response$carPlateNum !== void 0 ? _response$carPlateNum : '';\n      if (cameraType === 'L') {\n        setOrderWindow({\n          ...orderWindow,\n          [cameraName]: carPlateNumber\n        });\n        setCameraName(cameraName);\n      } else if (cameraType === 'C') {\n        setDeliveryWindow({\n          ...deliveryWindow,\n          [cameraName]: carPlateNumber\n        });\n        setCameraName(cameraName);\n      }\n    } catch (e) {\n      console.error('Error decoding STOMP message:', e);\n    }\n  };\n  useEffect(() => {\n    const client = new Client({\n      brokerURL: 'ws://dt1.thissolution.com/ws',\n      reconnectDelay: 5000,\n      debug: msg => console.log('DEBUG:', msg),\n      onConnect: () => {\n        console.log('Connected to WebSocket server!');\n        setClient(client);\n      },\n      onStompError: frame => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n      onWebSocketClose: event => {\n        console.log('WebSocket closed:', event);\n      },\n      onWebSocketError: event => {\n        console.error('WebSocket error:', event);\n      }\n    });\n    client.activate();\n    return () => {\n      client.deactivate();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StompContext.Provider, {\n    value: {\n      orderWindow,\n      deliveryWindow,\n      errorMessage,\n      cameraName,\n      clientRef\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(StompProvider, \"SDCJNeICyQdZ8KGpSuoKb4basjo=\");\n_c = StompProvider;\nexport const useStomp = () => {\n  _s2();\n  const ctx = useContext(StompContext);\n  if (!ctx) {\n    throw new Error('useStomp must be used within a StompProvider');\n  }\n  return ctx;\n};\n_s2(useStomp, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"StompProvider\");","map":{"version":3,"names":["Client","createContext","useContext","useEffect","useRef","useState","jsxDEV","_jsxDEV","StompContext","undefined","StompProvider","children","_s","errorMessage","setErrorMessage","orderWindow","setOrderWindow","cameraName","setCameraName","deliveryWindow","setDeliveryWindow","client","setClient","clientRef","subscribe","handleMessage","message","body","_response$cameraType","_response$cameraName","_response$carPlateNum","_response$carPlateNum2","response","JSON","parse","cameraType","carPlateNumber","toString","e","console","error","brokerURL","reconnectDelay","debug","msg","log","onConnect","onStompError","frame","headers","onWebSocketClose","event","onWebSocketError","activate","deactivate","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStomp","_s2","ctx","Error","$RefreshReg$"],"sources":["/home/harshad/OrderKey-Hub/drive-thru/UI/src/contexts/StompContext.js"],"sourcesContent":["// context/StompContext.tsx\nimport { Client } from '@stomp/stompjs';\nimport { createContext, useContext, useEffect, useRef, useState } from 'react';\n\nconst StompContext = createContext(undefined);\n\nexport const StompProvider = ({ children }) => {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [orderWindow, setOrderWindow] = useState({});\n  const [cameraName, setCameraName] = useState('');\n  const [deliveryWindow, setDeliveryWindow] = useState({});\n  const [client, setClient] = useState(null);\n\n\n  const clientRef = useRef(null);\n\n  useEffect(() => {\n    if (client) {\n      client.subscribe('/topic/send', handleMessage)\n    }\n  }, [client])\n\n  const handleMessage = (message) => {\n    if (!message.body) return;\n    try {\n      const response = JSON.parse(message.body);\n      const cameraType = response.cameraType ?? '';\n      const cameraName = response.cameraName ?? '';\n      const carPlateNumber = response.carPlateNumber?.toString() ?? '';\n\n      if (cameraType === 'L') {\n        setOrderWindow({ ...orderWindow, [cameraName]: carPlateNumber });\n        setCameraName(cameraName);\n      } else if (cameraType === 'C') {\n        setDeliveryWindow({ ...deliveryWindow, [cameraName]: carPlateNumber })\n        setCameraName(cameraName);\n      }\n    } catch (e) {\n      console.error('Error decoding STOMP message:', e);\n    }\n  };\n\n  useEffect(() => {\n    const client = new Client({\n      brokerURL: 'ws://dt1.thissolution.com/ws',\n      reconnectDelay: 5000,\n      debug: (msg) => console.log('DEBUG:', msg),\n\n      onConnect: () => {\n        console.log('Connected to WebSocket server!');\n        setClient(client);\n      },\n\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n\n      onWebSocketClose: (event) => {\n        console.log('WebSocket closed:', event);\n      },\n      onWebSocketError: (event) => {\n        console.error('WebSocket error:', event);\n      }\n    });\n\n    client.activate();\n\n    return () => {\n      client.deactivate();\n    };\n  }, []);\n\n  return (\n    <StompContext.Provider\n      value={{\n        orderWindow,\n        deliveryWindow,\n        errorMessage,\n        cameraName,\n        clientRef\n      }}\n    >\n      {children}\n    </StompContext.Provider>\n  );\n};\n\nexport const useStomp = () => {\n  const ctx = useContext(StompContext);\n  if (!ctx) {\n    throw new Error('useStomp must be used within a StompProvider');\n  }\n  return ctx;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}